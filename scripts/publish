#!/usr/bin/env bash

SCRIPT_DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
BASE_DIR="$( cd $SCRIPT_DIR && cd .. & pwd)"

CYAN="\033[96m"
YELLOW="\033[93m"
RESET="\033[0m"
BOLD="\033[1m"
NORMAL="\033[22m"

SINGLE_VERSION="false" # Should we publish all plugins using the version from-the top-level package file?
PUSH=""
REGISTRY=""
REG=""

usage() {
  echo "Usage: $0 [-v] [plugins]"
  #echo "  -v        Publish plugins using the version from-the top-level package file"
  echo "  -p        Push container images on build"
  echo "  -r <name> Specify destination container registry for built images"
  echo ""
  echo ""
  exit 1
}

while getopts "hvr:p" opt; do
  case $opt in
    h)
      usage
      ;;
    v)
      SINGLE_VERSION="true"
      ;;
    p)
      PUSH="--push"
      ;;
    r)
      REG="${OPTARG}"
      REGISTRY="${REG}/"
      ;;
    *)
      usage
      ;;
  esac
done

shift $((OPTIND-1))

PLUGINS=( "$@" )
BUILT="false"

echo -e "${CYAN}${BOLD}Publishing UI Plugins${RESET}"

pushd ${BASE_DIR} > /dev/null

VERSION=$(jq -r .version package.json)
echo "Version: $VERSION"

# --------------------------------------------------------------------------------
# Check that we have the required commands avaialble for this script
# --------------------------------------------------------------------------------

COMMANDS=("node" "jq" "yq" "git" "docker" "helm" "yarn")
HAVE_COMMANDS="true"
for CMD in "${COMMANDS[@]}"
do
  if ! command -v ${CMD} >/dev/null; then
    echo -e "${YELLOW}This script requires ${BOLD}${CMD}${NORMAL} to be installed and on your PATH${RESET}"
    HAVE_COMMANDS="false"
  fi
done

if [ "${HAVE_COMMANDS}" == "false" ]; then
  exit 1
fi

# --------------------------------------------------------------------------------

REPO=$(git config --get remote.origin.url | sed -e 's/^git@.*:\([[:graph:]]*\).git/\1/')

echo "GitHub Repository: ${REPO}"

docker images > /dev/null
if [ $? -ne 0 ]; then
  echo "docker is not running - this is required to build container images for the UI Plugins"
  exit 1
fi

ASSETS=${BASE_DIR}/assets
CHARTS=${BASE_DIR}/charts
mkdir -p ${ASSETS}
mkdir -p ${CHARTS}

TMP=${BASE_DIR}/tmp
CHART_TMP=${BASE_DIR}/tmp/_charts
rm -rf ${TMP}

CHART_TEMPLATE=${BASE_DIR}/tmp/ui-plugin-server

# --------------------------------------------------------------------------------
# Clone the plugin server template into the temporary folder
# --------------------------------------------------------------------------------
git clone -q https://github.com/rancher/ui-plugin-server.git ${CHART_TEMPLATE}

# --------------------------------------------------------------------------------
# Iterate through all packages - build them all or build only those specified on the command line
# --------------------------------------------------------------------------------
for d in pkg/*/ ; do
  pkg=$(basename $d)

  if [ -z "$1" ] || [[ " ${PLUGINS[*]} " =~ " ${pkg} " ]]; then
    # Check we don't already have a published version by looking in the assets folder
    PKG_VERSION=$(jq -r .version ./pkg/${pkg}/package.json)
    PKG_NAME="${pkg}-${PKG_VERSION}"
    PKG_ASSET=${ASSETS}/${pkg}/${PKG_NAME}.tgz

    echo -e "${CYAN}${BOLD}Building plugin: ${pkg} (${PKG_VERSION}) ${RESET}"

    if [ -f ${PKG_ASSET} ]; then
      echo -e "${YELLOW}Plugin has already been published - skipping${RESET}"
      continue;
    fi

    echo "Package version: ${PKG_VERSION}"
    echo "Package folder:  ${PKG_NAME}"

    # --------------------------------------------------------------------------------
    # Build the plugin from source
    # --------------------------------------------------------------------------------
    echo -e "${CYAN}Building plugin from source code${RESET}"
    FORCE_COLOR=1 yarn build-pkg $pkg | cat

    # --------------------------------------------------------------------------------
    # Create the container image
    # --------------------------------------------------------------------------------
    mkdir -p ${TMP}/container
    cp -R ${CHART_TEMPLATE}/ ${TMP}/container

    # Copy the plugin assets
    rm -rf ${TMP}/container/plugin
    mkdir ${TMP}/container/plugin

    cp -R ${BASE_DIR}/dist-pkg/${PKG_NAME}/ ${TMP}/container/plugin
    rm -f ${TMP}/container/plugin/report.html

    # Build the docker image
    pushd ${TMP}/container > /dev/null
    echo -e "${CYAN}Building container image ...${RESET}"
    docker build -f ./package/Dockerfile -t ${REGISTRY}${pkg}:${PKG_VERSION} .

    if [ "${PUSH}" == "--push" ]; then
      echo -e "${CYAN}Pusing container image ...${RESET}"
      docker push ${REGISTRY}${pkg}:${PKG_VERSION}
    fi

    popd > /dev/null

    rm -rf ${TMP}/container

    # --------------------------------------------------------------------------------
    # Create the Helm chart
    # --------------------------------------------------------------------------------

    CHART_FOLDER=${CHARTS}/${pkg}/${PKG_VERSION}

    mkdir -p ${ASSETS}/${pkg}
    rm -rf ${CHART_FOLDER}
    mkdir -p ${CHART_FOLDER}

    cp -R ${CHART_TEMPLATE}/charts/ ${CHART_FOLDER}

    # Update Chart.yaml and values.yaml from the package file metadata
    # Use the script from the template repository, if it is there

    # ${SCRIPT_DIR}/patch ${CHART_FOLDER} ${BASE_DIR}/pkg/${pkg}/package.json "${REG}"    

    # if [ -f ${SCRIPT_DIR}/patch ]; then
    #   echo "Patching Helm chart template using local script"
    #   cat ${BASE_DIR}/pkg/${pkg}/package.json
    #   ${SCRIPT_DIR}/patch ${CHART_FOLDER} ${BASE_DIR}/pkg/${pkg}/package.json "${REG}"
    # else if [ -f ${CHART_TEMPLATE}/scripts/patch ]; then
    #   echo "Patching Helm chart template"
    #   cat ${BASE_DIR}/pkg/${pkg}/package.json
    #   ${CHART_TEMPLATE}/scripts/patch ${CHART_FOLDER} ${BASE_DIR}/pkg/${pkg}/package.json "${REG}"
    # else
    #   # Remove this fallback once the patch script is working
    #   ${SCRIPT_DIR}/helmgen ./pkg/${pkg} ${CHART_FOLDER}
    # fi

    ${SCRIPT_DIR}/helmgen ${CHART_FOLDER} ./pkg/${pkg}/package.json "${REG}"

    # Copy README file from the plugin to the Helm chart, if there is one
    if [ -f "./pkg/${pkg}/README.md" ]; then
      cp ./pkg/${pkg}/README.md ${CHART_FOLDER}/README.md
    fi

    # Package into a .tgz helm chart
    helm package ${CHART_FOLDER} -d ${ASSETS}/${pkg}

    # --------------------------------------------------------------------------------
    # Update the helm index just for this chart 
    # --------------------------------------------------------------------------------
    HELM_INDEX=${BASE_DIR}/index.yaml

    if [ -f "${HELM_INDEX}" ]; then
      UPDATE="--merge ${HELM_INDEX}"
    fi

    # Base URL referencing assets directly from GitHub
    BASE_URL="https://raw.githubusercontent.com/${REPO}/main/assets/${pkg}"

    rm -rf ${CHART_TMP}
    mkdir -p ${CHART_TMP}
    cp ${ASSETS}/${pkg}/*.tgz ${CHART_TMP}

    helm repo index ${CHART_TMP} --url ${BASE_URL} ${UPDATE}

    cp ${CHART_TMP}/index.yaml ${HELM_INDEX}

    BUILT="true"
  fi
done


echo -e "${CYAN}Creating GitHub Release${RESET}"

# Create release and upload Helm charts to the GitHub release
gh release create -R ${REPO} ${VERSION} --generate-notes -t "Release ${VERSION}" ${CHART_TMP}/*.tgz
gh release upload -R ${REPO} ${VERSION} ${CHART_TMP}/*.tgz

#cat index.yaml
git add index.yaml
git commit -m "Update Helm repository index for version ${VERSION}"
git push origin HEAD:gh-pages -f

if [ "${BUILT}" == "true" ]; then
  echo "One or more packages built"
fi

popd > /dev/null

# Clean up
rm -rf ${CHART_TMP}
rm -rf ${TMP}

# If the user asked to create a commit, commit the changes
# if [ "${COMMIT}" == "true" ]; then
#   echo -e "${CYAN}${BOLD}Creating git commit${RESET}"
#   git add --all
# fi